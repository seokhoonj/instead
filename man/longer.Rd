% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/longer.R
\name{longer}
\alias{longer}
\alias{longer.data.frame}
\alias{longer.data.table}
\title{Longer (S3 generic)}
\usage{
longer(x, ...)

\method{longer}{data.frame}(
  x,
  id_vars,
  measure_vars,
  variable_name = "variable",
  value_name = "value",
  ...,
  na.rm = FALSE,
  variable_factor = TRUE,
  value_factor = FALSE,
  verbose = getOption("data.table.verbose")
)

\method{longer}{data.table}(
  x,
  id_vars,
  measure_vars,
  variable_name = "variable",
  value_name = "value",
  ...,
  na.rm = FALSE,
  variable_factor = TRUE,
  value_factor = FALSE,
  verbose = getOption("data.table.verbose")
)
}
\arguments{
\item{x}{A \code{data.table}.}

\item{...}{Additional arguments forwarded to \code{data.table::melt()}.}

\item{id_vars}{Columns to keep fixed (identifier variables). Supports
unquoted names, character vectors, or numeric indices.}

\item{measure_vars}{Columns to gather into long form. Supports
unquoted names, character vectors, or numeric indices.}

\item{variable_name}{Name of the output "key" column (default: \code{"variable"}).}

\item{value_name}{Name of the output "value" column (default: \code{"value"}).}

\item{na.rm, variable_factor, value_factor, verbose}{Passed directly to
\code{data.table::melt()}.}
}
\value{
A long-form object as defined by the dispatched method.

A long-form table with the original outer class restored.

A long-form \code{data.table}.
}
\description{
A lightweight S3 generic for reshaping objects to long form,
conceptually similar to \code{data.table::melt()}. Concrete methods may
delegate to \code{data.table::melt()} or provide class-specific behavior.

\code{longer.data.frame()} reshapes a \code{data.frame} from wide to long format
using \code{data.table::melt()} internally.

\code{longer.data.table()} provides a convenient NSE interface to
\code{data.table::melt()}, supporting unquoted column selection for
\code{id_vars} and \code{measure_vars}.
}
\details{
It supports \strong{NSE (non-standard evaluation)} for \code{id_vars} and
\code{measure_vars}, allowing unquoted column names (e.g. \code{c(mpg, wt)}).
If these arguments are omitted, all remaining columns are inferred.

The input is coerced to a \code{data.table}, reshaped, and the original
outer class (e.g. tibble) is restored on return.

Column symbols are resolved internally using \code{capture_names()}.
This allows flexible use of both quoted and unquoted variable names
without losing compatibility with \code{data.table::melt()}.

Both \code{id_vars} / \code{measure_vars} and \code{id.vars} / \code{measure.vars}
argument styles are accepted for compatibility.

This wrapper resolves NSE expressions via \code{instead::capture_names()},
enabling both quoted and unquoted column references while maintaining
full compatibility with \code{data.table::melt()}.
}
\examples{
\dontrun{
longer(mtcars, id_vars = c(cyl, gear), measure_vars = c(mpg, wt))
}

\dontrun{
df <- mtcars

# Unquoted NSE columns
longer.data.table(dt, id_vars = c(cyl, gear), measure_vars = c(mpg, wt))

# Quoted style (standard data.table syntax)
longer.data.table(dt, id_vars = c("cyl", "gear"), measure_vars = c("mpg", "wt"))
}

\dontrun{
dt <- data.table::as.data.table(mtcars)

# Unquoted NSE columns
longer.data.table(dt, id_vars = c(cyl, gear), measure_vars = c(mpg, wt))

# Quoted style (standard data.table syntax)
longer.data.table(dt, id_vars = c("cyl", "gear"), measure_vars = c("mpg", "wt"))
}

}
\seealso{
\code{\link[data.table:melt.data.table]{data.table::melt()}}

\code{\link[data.table:melt.data.table]{data.table::melt()}}
}
